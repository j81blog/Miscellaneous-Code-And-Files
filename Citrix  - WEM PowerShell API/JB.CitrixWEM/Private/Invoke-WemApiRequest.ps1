function Invoke-WemApiRequest {
    <#
    .SYNOPSIS
        A private helper function to handle all web requests to the WEM API.
    .DESCRIPTION
        This function centralizes the logic for making authenticated API calls.
        It has two modes:
        1. Default: Takes a single connection object generated by Connect-WemApi. This is used by all functions in the module.
        2. Manual: Takes individual parameters for base URL and token, intended for testing and development.
    .PARAMETER Connection
        The active connection object generated by Connect-WemApi.
    .PARAMETER UriPath
        Specifies the path of the API endpoint (e.g., "/services/wem/sites").
    .PARAMETER Method
        Specifies the HTTP method to use (e.g., GET, POST, DELETE).
    .PARAMETER Manual
        A switch to activate the manual parameter set for testing.
    .PARAMETER BaseUrl
        The base URL for the WEM API (e.g. "http://wem.corp.local" or "https://eu-api-webconsole.wem.cloud.com").
    .PARAMETER BearerToken
        The full bearer token string (e.g., "session <guid>" or "CWSAuth bearer <token>").
    .PARAMETER CustomerId
        The Citrix Customer ID (only for Cloud calls).
    .NOTES
        Version:        1.6
        Author:         John Billekens Consultancy
        Co-Author:      Gemini
        Creation Date:  2025-08-05
    #>
    [CmdletBinding(DefaultParameterSetName = 'Automatic')]
    param(
        # --- Automatic Parameter Set (used by the module) ---
        [Parameter(Mandatory = $true, ParameterSetName = 'Automatic')]
        [PSCustomObject]$Connection,

        # --- Manual/Testing Parameter Set ---
        [Parameter(Mandatory = $true, ParameterSetName = 'Manual')]
        [switch]$Manual,

        [Parameter(Mandatory = $true, ParameterSetName = 'Manual')]
        [string]$BaseUrl,

        [Parameter(Mandatory = $true, ParameterSetName = 'Manual')]
        [string]$BearerToken,

        [Parameter(Mandatory = $false, ParameterSetName = 'Manual')]
        [string]$CustomerId,

        [Parameter(Mandatory = $false, ParameterSetName = 'Manual')]
        [Microsoft.PowerShell.Commands.WebRequestSession]$WebSession,

        # --- Common Parameters ---
        [Parameter(Mandatory = $true, Position = 0)]
        [string]$UriPath,

        [Parameter(Mandatory = $true, Position = 1)]
        [ValidateSet("GET", "POST", "PUT", "DELETE", "PATCH")]
        [string]$Method,

        [Parameter(Mandatory = $false)]
        [object]$Body
    )

    # Determine the source of connection details based on the parameter set
    if ($PSCmdlet.ParameterSetName -eq 'Manual') {
        $ActiveBaseUrl     = $BaseUrl
        $ActiveBearerToken = $BearerToken
        $ActiveCustomerId  = if ($PSBoundParameters.ContainsKey('CustomerId')) { $CustomerId } else { $null }
        $ActiveWebSession  = if ($PSBoundParameters.ContainsKey('WebSession')) { $WebSession } else { $null }
        $IsOnPrem          = if ($ActiveBearerToken.StartsWith("basic") -or $ActiveBearerToken.StartsWith("session")) { $true } else { $false }
    }
    else { # Automatic
        $ActiveBaseUrl     = $Connection.BaseUrl
        $ActiveBearerToken = $Connection.BearerToken
        $ActiveCustomerId  = $Connection.CustomerId
        $ActiveWebSession  = $Connection.WebSession
        $IsOnPrem          = $Connection.IsOnPrem
    }

    $FullUri = "$($ActiveBaseUrl)/$($UriPath.TrimStart('/'))"
    $Headers = @{ "Accept" = "application/json"; "Authorization" = $ActiveBearerToken }

    if (-not $IsOnPrem) {
        $Headers.Add("Citrix-CustomerId", $ActiveCustomerId)
        $Headers.Add("Citrix-TransactionId", (New-Guid).Guid)
    }

    $ApiSplat = @{
        UseBasicParsing = $true
        Uri             = $FullUri
        Method          = $Method
        Headers         = $Headers
        UserAgent       = "PowerShell/5.1 (Windows NT 10.0; Win64; x64) CitrixWEMClient/1.0"
        ContentType     = "application/json; charset=UTF-8"
        ErrorAction     = "Stop"
    }

    if ($IsOnPrem -and $null -ne $ActiveWebSession) {
        $ApiSplat.Add('WebSession', $ActiveWebSession)
    }
    if ($PSBoundParameters.ContainsKey('Body')) {
        $ApiSplat.Add('Body', ($Body | ConvertTo-Json -Depth 10 -Compress))
    }

    # De catch-logica blijft hetzelfde als in de vorige, robuuste versie
    try {
        $Response = Invoke-WebRequest @ApiSplat
        if ($Response.Content) { return $Response.Content | ConvertFrom-Json }
        return $null
    }
    catch {
        $ErrorMessage = "API call to '$($FullUri)' failed."
        if ($_.Exception.Response) {
            $StatusCode = $_.Exception.Response.StatusCode.value__
            $StatusDescription = $_.Exception.Response.StatusDescription
            $ErrorMessage += " Status: $($StatusCode) - $($StatusDescription)."
            try {
                $ErrorContent = $_.Exception.Response.GetResponseStream()
                $StreamReader = New-Object System.IO.StreamReader($ErrorContent)
                $ErrorBody = $StreamReader.ReadToEnd(); $StreamReader.Close()
                if (-not [string]::IsNullOrWhiteSpace($ErrorBody)) {
                    $ErrorJson = $ErrorBody | ConvertFrom-Json -ErrorAction SilentlyContinue
                    if ($ErrorJson -and $ErrorJson.detail) { $ErrorMessage += " Detail: $($ErrorJson.detail)" }
                    else { $ErrorMessage += " Raw Response: $($ErrorBody)" }
                }
            } catch {}
        } else { $ErrorMessage += " Details: $($_.Exception.Message)" }
        throw $ErrorMessage
    }
}